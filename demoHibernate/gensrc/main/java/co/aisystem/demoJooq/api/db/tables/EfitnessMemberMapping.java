/*
 * This file is generated by jOOQ.
*/
package co.aisystem.demoJooq.api.db.tables;


import co.aisystem.demoJooq.api.db.Indexes;
import co.aisystem.demoJooq.api.db.Keys;
import co.aisystem.demoJooq.api.db.Public;
import co.aisystem.demoJooq.api.db.tables.records.EfitnessMemberMappingRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EfitnessMemberMapping extends TableImpl<EfitnessMemberMappingRecord> {

    private static final long serialVersionUID = -701315546;

    /**
     * The reference instance of <code>public.efitness_member_mapping</code>
     */
    public static final EfitnessMemberMapping EFITNESS_MEMBER_MAPPING = new EfitnessMemberMapping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EfitnessMemberMappingRecord> getRecordType() {
        return EfitnessMemberMappingRecord.class;
    }

    /**
     * The column <code>public.efitness_member_mapping.id</code>.
     */
    public final TableField<EfitnessMemberMappingRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('efitness_member_mapping_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.efitness_member_mapping.e_fitness_id</code>.
     */
    public final TableField<EfitnessMemberMappingRecord, Long> E_FITNESS_ID = createField("e_fitness_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.efitness_member_mapping.member_id</code>.
     */
    public final TableField<EfitnessMemberMappingRecord, Long> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.efitness_member_mapping</code> table reference
     */
    public EfitnessMemberMapping() {
        this(DSL.name("efitness_member_mapping"), null);
    }

    /**
     * Create an aliased <code>public.efitness_member_mapping</code> table reference
     */
    public EfitnessMemberMapping(String alias) {
        this(DSL.name(alias), EFITNESS_MEMBER_MAPPING);
    }

    /**
     * Create an aliased <code>public.efitness_member_mapping</code> table reference
     */
    public EfitnessMemberMapping(Name alias) {
        this(alias, EFITNESS_MEMBER_MAPPING);
    }

    private EfitnessMemberMapping(Name alias, Table<EfitnessMemberMappingRecord> aliased) {
        this(alias, aliased, null);
    }

    private EfitnessMemberMapping(Name alias, Table<EfitnessMemberMappingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EFITNESS_MEMBER_MAPPING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EfitnessMemberMappingRecord, Long> getIdentity() {
        return Keys.IDENTITY_EFITNESS_MEMBER_MAPPING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EfitnessMemberMappingRecord> getPrimaryKey() {
        return Keys.EFITNESS_MEMBER_MAPPING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EfitnessMemberMappingRecord>> getKeys() {
        return Arrays.<UniqueKey<EfitnessMemberMappingRecord>>asList(Keys.EFITNESS_MEMBER_MAPPING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EfitnessMemberMapping as(String alias) {
        return new EfitnessMemberMapping(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EfitnessMemberMapping as(Name alias) {
        return new EfitnessMemberMapping(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EfitnessMemberMapping rename(String name) {
        return new EfitnessMemberMapping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EfitnessMemberMapping rename(Name name) {
        return new EfitnessMemberMapping(name, null);
    }
}
